# load libraries
pck_list <- c("assertthat","ggplot2", "tidyr", "dplyr","raster", "e1071", "rgdal",
"viridisLite", "randomForest", "Metrics", "ggpubr")
lapply(pck_list, require, character.only = TRUE)
getwd()
# load library endmembers
df_speclib <- read.table('data/spectral-library/speclib_grassland_ger.txt', header=T, sep=',', row.names=1)
# load library endmembers
df_speclib <- read.table('data/spectral-library/speclib_grassland_ger.txt', header=T, sep=',')
df_speclib
#### Generate synthetic mixtures
mixture_pv <- synthmix(em_df, 1, c(2,3,4), mix_complexity=c(2,3), n_samples = 1000,
p_mix_complexity=c(.5, .5), within_class_mixture=T)
synthmix <- function(df, cl_target, cl_background, n_samples=1000,
mix_complexity=c(2, 3, 4), p_mix_complexity=c(.7, .2, .1),
within_class_mixture=TRUE, include_endmember=TRUE){
"Function to generate synthetic training data mixtures from pure endmember
spectra.
df:                 (list) Input dataframe. First column must contain the
class-IDs in integer format. Remaining columns must
contain the features to be mixed.
cl_target:          (int) Target class' integer ID value.
cl_background:      (int) Background class' integer ID value(s). Vector for
multiple classes, e.g. 'c(2, 3, 4)'.
n_samples:          (int) Number of synthetic training points to generate.
mix_complexity:     (int) Vector with desired number of possible mixtures
between different classes.
p_mix_complexity:   (float) Vector containing desired occurence propabilities
associated to the number of possible mixtures
(i.e. mix_complexity). Must be of same length as
'mix_complexity' argument.
returns:            (list) Dataframe with linearily mixed features and
corresponding fraction of target class (i.e. cl_target)
"
# total number of classes
all_ems <- c(cl_target, cl_background)
n_em <- length(all_ems)
# create empty df to store training data
df_mixture <- setNames(data.frame(matrix(ncol = ncol(df), nrow = 0)),
c(names(df)[2:length(df)], "fraction"))
# index list of EMs for sampling
idx_em <- list()
for (em in all_ems){
idx_em[[em]] <- which(df[,1] == em)
}
# vector for fraction calculation
zero_one <- integer(nrow(df))
zero_one[idx_em[[cl_target]]] <- 1
# iterator for generating each synthetic mixture
for (i in 1:n_samples) {
if (length(p_mix_complexity) == 1){
complexity = mix_complexity
} else {
# sample mixing complexity based on mixing likelihoods
complexity = sample(as.vector(mix_complexity),
size = 1,
prob = as.vector(p_mix_complexity))
}
# select background EMs which will be included in the mixture
if (within_class_mixture){
background <- sample(all_ems, complexity - 1, replace = TRUE)
} else {
background <- sample(cl_background, complexity - 1, replace = FALSE)
}
# sample indices of selected EMs
response <- c(cl_target, background)
drawn_index <- c()
for (r in response){
drawn_index <- c(drawn_index, sample(idx_em[[r]], 1))
}
drawn_features <- df[drawn_index, 2:length(df)]
drawn_fraction <- zero_one[drawn_index]
# sample random weights
drawn_weights <- c()
for (j in 1:(complexity-1)){
if (j == 1){
weight <- runif(1)
} else {
weight <- runif(1) * (1. - sum(drawn_weights))
}
drawn_weights <- c(drawn_weights, weight)
}
drawn_weights <- c(drawn_weights, (1. - sum(drawn_weights)))
# calculate mixtures and associated fractions
calc_mixtures <- apply(drawn_features * drawn_weights, 2, FUN=sum)
calc_fraction <- sum(drawn_fraction * drawn_weights)
# append to df
df_mixture[nrow(df_mixture)+1,] <- c(calc_mixtures, calc_fraction)
}
if (include_endmember){
df_endmember <- cbind(df[,2:length(df)], zero_one)
colnames(df_endmember) <- c(names(df)[2:length(df)], "fraction")
df_mixture <- rbind(df_mixture, df_endmember)
}
return(df_mixture)
}
#### Generate synthetic mixtures
mixture_pv <- synthmix(em_df, 1, c(2,3,4), mix_complexity=c(2,3), n_samples = 1000,
p_mix_complexity=c(.5, .5), within_class_mixture=T)
# load libraries
pck_list <- c("assertthat","ggplot2", "tidyr", "dplyr","raster", "e1071", "rgdal",
"viridisLite", "randomForest", "Metrics", "ggpubr")
lapply(pck_list, require, character.only = TRUE)
# load endmembers
S2_EM <- read.table('S08/S2_EM.txt', header=T, sep=',', row.names=1)
S2_EM$wavelength <- c(492.7, 559.8, 664.6, 704.1, 740.5, 782.8, 832.8, 864.7, 1613.7, 2202.4)
# plot endmembers
ggplot(S2_EM) +
geom_line(aes(wavelength, PV), color='green') +
geom_line(aes(wavelength, NPV), color='brown') +
geom_line(aes(wavelength, shade), color='grey') +
geom_line(aes(wavelength, soil), color='yellow') +
labs(x="Wavelength (nm)", y="Reflectance")
# load endmembers
S2_EM <- read.table('S2_EM.txt', header=T, sep=',', row.names=1)
# load validation data
validate_path <- 'data/vector/validation/GE_VAL_s2_bands_subset.gpkg'
validate_data <- readOGR(validate_path)
# load libraries
pck_list <- c("assertthat","ggplot2", "tidyr", "dplyr","raster", "e1071", "rgdal",
"viridisLite", "randomForest", "Metrics", "ggpubr")
lapply(pck_list, require, character.only = TRUE)
# load validation data
validate_path <- 'data/vector/validation/GE_VAL_s2_bands_subset.gpkg'
validate_data <- readOGR(validate_path)
# Extract validation
val_val <- data.frame(validate_data)
val_val
