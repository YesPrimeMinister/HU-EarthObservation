"
# count number of observations = number of bands in the input datasets
n_bands <- nlayers(stack(raster_list[[1]]))
obs_dates <- names(stack(raster_list[[1]]))
# init stacks for fractions at every oobservation
stack_pv <- NaN
stack_npv <- NaN
stack_soil <- NaN
# unmix at every time step
for (obs in 1:n_bands) {
print(obs)
# read inidvidual spectral bands for individual files
blue  <- raster(raster_list[1], band = obs)
green <- raster(raster_list[3], band = obs)
red   <- raster(raster_list[8], band = obs)
re1   <- raster(raster_list[5], band = obs)
re2   <- raster(raster_list[6], band = obs)
re3   <- raster(raster_list[7], band = obs)
bnir  <- raster(raster_list[2], band = obs)
nir   <- raster(raster_list[4], band = obs)
swir1 <- raster(raster_list[9], band = obs)
swir2 <- raster(raster_list[10], band = obs)
# stack spectral bands into a monotemporal, multispectral raster stack
stack_monotemp <- stack(blue, green, red, re1, re2, re3, bnir, nir, swir1, swir2)
stack_monotemp <- stack_monotemp / 10000
names(stack_monotemp) <- bandnames
# apply unmixing models to the monotemporal raster
pred_pv   <- predict(stack_monotemp, model_pv, type='response', na.omit=T)
#pred_npv  <- predict(stack_monotemp, model_npv, type='response', na.omit=T)
#pred_soil <- predict(stack_monotemp, model_soil, type='response', na.omit=T)
# add raster band name according to date
plot(pred_pv)
print(pred_pv)
print(obs_dates[obs][1][1:9])
names(pred_pv)   <- obs_dates[obs][1][1:9]
#names(pred_npv)  <- obs_dates[obs][1:9]
#names(pred_soil) <- obs_dates[obs][1:9]
# add fractions to the overall multitemporal fraction datasets
stack_pv <- stack(stack_pv, pred_pv)
#stack_npv <- stack(stack_npv, pred_npv)
#stack_soil <- stack(stack_soil, pred_soil)
}
return(stack_pv, stack_npv, stack_soil)
}
stack_pv <- unmix(rasters_list, band_names, PV_svm, NPV_svm, soil_svm)
names(stack(rasters_list[1]))
names(stack(rasters_list[1]))[1]
names(stack(rasters_list[1]))[1][1:9]
names(stack(rasters_list[1]))[[1]][1:9]
names(stack(rasters_list[1]))[[1]]
names(stack(rasters_list[1]))
obs <- 5
names(stack(rasters_list[1]))[obs]
substring(names(stack(rasters_list[1]))[obs], 1, 9)
unmix <- function(raster_list, bandnames, model_pv, model_npv, model_soil){
"Function to unmix all values in a .
df:                 (list) Input dataframe. First column must contain the
class-IDs in integer format. Remaining columns must
returns:            (list) Dataframe with linearily mixed features and
corresponding fraction of target class (i.e. cl_target)
"
# count number of observations = number of bands in the input datasets
n_bands <- nlayers(stack(raster_list[[1]]))
obs_dates <- names(stack(raster_list[[1]]))
# init stacks for fractions at every oobservation
stack_pv <- NaN
stack_npv <- NaN
stack_soil <- NaN
# unmix at every time step
for (obs in 1:n_bands) {
print(obs)
# read inidvidual spectral bands for individual files
blue  <- raster(raster_list[1], band = obs)
green <- raster(raster_list[3], band = obs)
red   <- raster(raster_list[8], band = obs)
re1   <- raster(raster_list[5], band = obs)
re2   <- raster(raster_list[6], band = obs)
re3   <- raster(raster_list[7], band = obs)
bnir  <- raster(raster_list[2], band = obs)
nir   <- raster(raster_list[4], band = obs)
swir1 <- raster(raster_list[9], band = obs)
swir2 <- raster(raster_list[10], band = obs)
# stack spectral bands into a monotemporal, multispectral raster stack
stack_monotemp <- stack(blue, green, red, re1, re2, re3, bnir, nir, swir1, swir2)
stack_monotemp <- stack_monotemp / 10000
names(stack_monotemp) <- bandnames
# apply unmixing models to the monotemporal raster
pred_pv   <- predict(stack_monotemp, model_pv, type='response', na.omit=T)
#pred_npv  <- predict(stack_monotemp, model_npv, type='response', na.omit=T)
#pred_soil <- predict(stack_monotemp, model_soil, type='response', na.omit=T)
# add raster band name according to date
plot(pred_pv)
print(pred_pv)
print(substring(obs_dates[obs], 1, 9))
names(pred_pv)   <- substring(obs_dates[obs], 1, 9)
#names(pred_npv)  <- obs_dates[obs][1:9]
#names(pred_soil) <- obs_dates[obs][1:9]
# add fractions to the overall multitemporal fraction datasets
stack_pv <- stack(stack_pv, pred_pv)
#stack_npv <- stack(stack_npv, pred_npv)
#stack_soil <- stack(stack_soil, pred_soil)
}
return(stack_pv, stack_npv, stack_soil)
}
stack_pv <- unmix(rasters_list, band_names, PV_svm, NPV_svm, soil_svm)
unmix <- function(raster_list, bandnames, model_pv, model_npv, model_soil){
"Function to unmix all values in a .
df:                 (list) Input dataframe. First column must contain the
class-IDs in integer format. Remaining columns must
returns:            (list) Dataframe with linearily mixed features and
corresponding fraction of target class (i.e. cl_target)
"
# count number of observations = number of bands in the input datasets
n_bands <- nlayers(stack(raster_list[[1]]))
obs_dates <- names(stack(raster_list[[1]]))
# init stacks for fractions at every oobservation
list_pv   <- vector(mode='list', length=n_bands)
list_npv  <- vector(mode='list', length=n_bands)
list_soil <- vector(mode='list', length=n_bands)
# unmix at every time step
for (obs in 1:n_bands) {
print(obs)
# read inidvidual spectral bands for individual files
blue  <- raster(raster_list[1], band = obs)
green <- raster(raster_list[3], band = obs)
red   <- raster(raster_list[8], band = obs)
re1   <- raster(raster_list[5], band = obs)
re2   <- raster(raster_list[6], band = obs)
re3   <- raster(raster_list[7], band = obs)
bnir  <- raster(raster_list[2], band = obs)
nir   <- raster(raster_list[4], band = obs)
swir1 <- raster(raster_list[9], band = obs)
swir2 <- raster(raster_list[10], band = obs)
# stack spectral bands into a monotemporal, multispectral raster stack
stack_monotemp <- stack(blue, green, red, re1, re2, re3, bnir, nir, swir1, swir2)
stack_monotemp <- stack_monotemp / 10000
names(stack_monotemp) <- bandnames
# apply unmixing models to the monotemporal raster
pred_pv   <- predict(stack_monotemp, model_pv, type='response', na.omit=T)
#pred_npv  <- predict(stack_monotemp, model_npv, type='response', na.omit=T)
#pred_soil <- predict(stack_monotemp, model_soil, type='response', na.omit=T)
# add raster band name according to date
plot(pred_pv)
print(pred_pv)
print(substring(obs_dates[obs], 1, 9))
names(pred_pv)   <- substring(obs_dates[obs], 1, 9)
#names(pred_npv)  <- substring(obs_dates[obs], 1, 9)
#names(pred_soil) <- substring(obs_dates[obs], 1, 9)
# add fractions to the overall multitemporal fraction datasets
list_pv[obs] <- pred_pv
#list_npv[obs] <- pred_npv
#list_soil[obs] <- pred_soil
}
stack_pv   <- stack(list_pv)
stack_npv  <- stack(list_npv)
stack_soil <- stack(list_soil)
return(stack_pv, stack_npv, stack_soil)
}
stack_pv <- unmix(rasters_list, band_names, PV_svm, NPV_svm, soil_svm)
warnings()
vector(mode='list', length=52)
lsit <- vector(mode='list', length=52)
lsit[5] <- 5
lsit
unmix <- function(raster_list, bandnames, model_pv, model_npv, model_soil){
"Function to unmix all values in a .
df:                 (list) Input dataframe. First column must contain the
class-IDs in integer format. Remaining columns must
returns:            (list) Dataframe with linearily mixed features and
corresponding fraction of target class (i.e. cl_target)
"
# count number of observations = number of bands in the input datasets
n_bands <- nlayers(stack(raster_list[[1]]))
obs_dates <- names(stack(raster_list[[1]]))
# init stacks for fractions at every oobservation
list_pv   <- list()
list_npv  <- vector(mode='list', length=n_bands)
list_soil <- vector(mode='list', length=n_bands)
# unmix at every time step
for (obs in 1:n_bands) {
print(obs)
# read inidvidual spectral bands for individual files
blue  <- raster(raster_list[1], band = obs)
green <- raster(raster_list[3], band = obs)
red   <- raster(raster_list[8], band = obs)
re1   <- raster(raster_list[5], band = obs)
re2   <- raster(raster_list[6], band = obs)
re3   <- raster(raster_list[7], band = obs)
bnir  <- raster(raster_list[2], band = obs)
nir   <- raster(raster_list[4], band = obs)
swir1 <- raster(raster_list[9], band = obs)
swir2 <- raster(raster_list[10], band = obs)
# stack spectral bands into a monotemporal, multispectral raster stack
stack_monotemp <- stack(blue, green, red, re1, re2, re3, bnir, nir, swir1, swir2)
stack_monotemp <- stack_monotemp / 10000
names(stack_monotemp) <- bandnames
# apply unmixing models to the monotemporal raster
pred_pv   <- predict(stack_monotemp, model_pv, type='response', na.omit=T)
#pred_npv  <- predict(stack_monotemp, model_npv, type='response', na.omit=T)
#pred_soil <- predict(stack_monotemp, model_soil, type='response', na.omit=T)
# add raster band name according to date
plot(pred_pv)
print(pred_pv)
print(substring(obs_dates[obs], 1, 9))
names(pred_pv)   <- substring(obs_dates[obs], 1, 9)
#names(pred_npv)  <- substring(obs_dates[obs], 1, 9)
#names(pred_soil) <- substring(obs_dates[obs], 1, 9)
# add fractions to the overall multitemporal fraction datasets
list_pv[obs] <- pred_pv
print(list_pv)
#list_npv[obs] <- pred_npv
#list_soil[obs] <- pred_soil
}
stack_pv   <- stack(list_pv)
print(stack_pv)
#stack_npv  <- stack(list_npv)
#stack_soil <- stack(list_soil)
return(stack_pv)#, stack_npv, stack_soil)
}
# testing unmix
unmix(rasters_list, band_names, PV_svm, NPV_svm, soil_svm)
unmix <- function(raster_list, bandnames, model_pv, model_npv, model_soil){
"Function to unmix all values in a .
df:                 (list) Input dataframe. First column must contain the
class-IDs in integer format. Remaining columns must
returns:            (list) Dataframe with linearily mixed features and
corresponding fraction of target class (i.e. cl_target)
"
# count number of observations = number of bands in the input datasets
n_bands <- nlayers(stack(raster_list[[1]]))
obs_dates <- names(stack(raster_list[[1]]))
# init stacks for fractions at every oobservation
list_pv   <- list()
list_npv  <- vector(mode='list', length=n_bands)
list_soil <- vector(mode='list', length=n_bands)
# unmix at every time step
for (obs in 1:n_bands) {
print(obs)
# read inidvidual spectral bands for individual files
blue  <- raster(raster_list[1], band = obs)
green <- raster(raster_list[3], band = obs)
red   <- raster(raster_list[8], band = obs)
re1   <- raster(raster_list[5], band = obs)
re2   <- raster(raster_list[6], band = obs)
re3   <- raster(raster_list[7], band = obs)
bnir  <- raster(raster_list[2], band = obs)
nir   <- raster(raster_list[4], band = obs)
swir1 <- raster(raster_list[9], band = obs)
swir2 <- raster(raster_list[10], band = obs)
# stack spectral bands into a monotemporal, multispectral raster stack
stack_monotemp <- stack(blue, green, red, re1, re2, re3, bnir, nir, swir1, swir2)
stack_monotemp <- stack_monotemp / 10000
names(stack_monotemp) <- bandnames
# apply unmixing models to the monotemporal raster
pred_pv   <- predict(stack_monotemp, model_pv, type='response', na.omit=T)
pred_npv  <- predict(stack_monotemp, model_npv, type='response', na.omit=T)
pred_soil <- predict(stack_monotemp, model_soil, type='response', na.omit=T)
# add raster band name according to date
plot(pred_pv)
names(pred_pv)   <- substring(obs_dates[obs], 1, 9)
names(pred_npv)  <- substring(obs_dates[obs], 1, 9)
names(pred_soil) <- substring(obs_dates[obs], 1, 9)
# add fractions to the overall multitemporal fraction datasets
list_pv[obs] <- pred_pv
print(list_pv)
list_npv[obs] <- pred_npv
list_soil[obs] <- pred_soil
}
stack_pv   <- stack(list_pv)
stack_npv  <- stack(list_npv)
stack_soil <- stack(list_soil)
return(stack_pv, stack_npv, stack_soil)
}
# HERE; WE CAN LOAD THE SENTINEL 2 IMAGERY, THAT WE WILL DECIDE TO USE
TEMP_dir = 'E:/__Earth_Observation/grasslands/data/raster/sentinel-2/X0058_Y0040'
rasters_list <- list.files(TEMP_dir, full.names = TRUE)
# =============================================================================
# GCG - EARTH OBSERVATION SUMMER 2022
# SESSION 08: Estimating fractional cover
# Andre Fischer
# =============================================================================
# load required packages
l_packages <- c("assertthat","GGally", "ggplot2", "tidyr", "dplyr","raster", "e1071",
"rgdal", "viridisLite", "randomForest", "ggpubr", "Metrics")
for (p in l_packages){
if(! p %in% installed.packages()){
install.packages(p, dependencies = TRUE)
}
library(p, character.only = T)
}
dir_main <- 'data'
setwd(dir_main)
files_data <- c(list.files(dir_main, full.names = FALSE, recursive = TRUE))
# =============================================================================
# load library endmembers
df_speclib <- read.table('spectral-library/speclib_grassland_ger.txt', header=T, sep=',')
head(df_speclib)
# rescaling reflectance
df_speclib[ ,1:10] <- df_speclib[ ,1:10] / 10000
print(df_speclib)
# add shade as a class
df_speclib[nrow(df_speclib) + 1,] <- c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
0.01, 0.01, 0.01, 3)
# Prepare data frame for synthmix-function
df <- df_speclib
df <- df[ ,c(11, 1:10)]
colnames(df)[1] <- "class_ID"
df$class_ID <- replace(df$class_ID, df$class_ID=="PV", 1)
df$class_ID <- replace(df$class_ID, df$class_ID=="NPV", 2)
df$class_ID <- replace(df$class_ID, df$class_ID=="soil", 4)
df$class_ID <- as.integer(df$class_ID)
synthmix <- function(df, cl_target, cl_background, n_samples,
mix_complexity, p_mix_complexity,
within_class_mixture=TRUE, include_endmember=TRUE){
"Function to generate synthetic training data mixtures from pure endmember
spectra.
df:                 (list) Input dataframe. First column must contain the
class-IDs in integer format. Remaining columns must
contain the features to be mixed.
cl_target:          (int) Target class' integer ID value.
cl_background:      (int) Background class' integer ID value(s). Vector for
multiple classes, e.g. 'c(2, 3, 4)'.
n_samples:          (int) Number of synthetic training points to generate.
mix_complexity:     (int) Vector with desired number of possible mixtures
between different classes.
p_mix_complexity:   (float) Vector containing desired occurence propabilities
associated to the number of possible mixtures
(i.e. mix_complexity). Must be of same length as
'mix_complexity' argument.
returns:            (list) Dataframe with linearily mixed features and
corresponding fraction of target class (i.e. cl_target)
"
# total number of classes
all_ems <- c(cl_target, cl_background)
n_em <- length(all_ems)
# create empty df to store training data
df_mixture <- setNames(data.frame(matrix(ncol = ncol(df), nrow = 0)),
c(names(df)[2:length(df)], "fraction"))
# index list of EMs for sampling
idx_em <- list()
for (em in all_ems){
idx_em[[em]] <- which(df[,1] == em)
}
# vector for fraction calculation
zero_one <- integer(nrow(df))
zero_one[idx_em[[cl_target]]] <- 1
# iterator for generating each synthetic mixture
for (i in 1:n_samples) {
if (length(p_mix_complexity) == 1){
complexity = mix_complexity
} else {
# sample mixing complexity based on mixing likelihoods
complexity = sample(as.vector(mix_complexity),
size = 1,
prob = as.vector(p_mix_complexity))
}
# select background EMs which will be included in the mixture
if (within_class_mixture){
background <- sample(all_ems, complexity - 1, replace = TRUE)
} else {
background <- sample(cl_background, complexity - 1, replace = FALSE)
}
# sample indices of selected EMs
response <- c(cl_target, background)
drawn_index <- c()
for (r in response){
drawn_index <- c(drawn_index, sample(idx_em[[r]], 1))
}
drawn_features <- df[drawn_index, 2:length(df)]
drawn_fraction <- zero_one[drawn_index]
# sample random weights
drawn_weights <- c()
for (j in 1:(complexity-1)){
if (j == 1){
weight <- runif(1)
} else {
weight <- runif(1) * (1. - sum(drawn_weights))
}
drawn_weights <- c(drawn_weights, weight)
}
drawn_weights <- c(drawn_weights, (1. - sum(drawn_weights)))
# calculate mixtures and associated fractions
calc_mixtures <- apply(drawn_features * drawn_weights, 2, FUN=sum)
calc_fraction <- sum(drawn_fraction * drawn_weights)
# append to df
df_mixture[nrow(df_mixture)+1,] <- c(calc_mixtures, calc_fraction)
}
if (include_endmember){
df_endmember <- cbind(df[,2:length(df)], zero_one)
colnames(df_endmember) <- c(names(df)[2:length(df)], "fraction")
df_mixture <- rbind(df_mixture, df_endmember)
}
return(df_mixture)
}
PV_mix <- synthmix(df, cl_target = 1, cl_background = c(2,3,4), n_samples = 500,
mix_complexity = c(2,3,4), p_mix_complexity = c(.7, .2, .1))
NPV_mix <- synthmix(df, cl_target = 2, cl_background = c(1,3,4), n_samples = 500,
mix_complexity = c(2,3,4), p_mix_complexity = c(.7, .2, .1))
soil_mix <- synthmix(df, cl_target = 4, cl_background = c(1,2,3), n_samples = 500,
mix_complexity = c(2,3,4), p_mix_complexity = c(.7, .2, .1))
# =============================================================================
#### Building the SVR models
# Define accuracy from 10-fold cross-validation as optimization measure
cv <- tune.control(cross = 10)
# tune svm and store the best model
tune_PV <- tune.svm(fraction~., data = PV_mix, kernel = 'radial', gamma = 10^(-3:3),
cost = 10^(-3:3), tunecontrol = cv)
PV_svm <- tune_PV$best.model
tune_NPV <- tune.svm(fraction~., data = NPV_mix, kernel = 'radial', gamma = 10^(-3:3),
cost = 10^(-3:3), tunecontrol = cv)
NPV_svm <- tune_NPV$best.model
tune_soil <- tune.svm(fraction~., data = soil_mix, kernel = 'radial', gamma = 10^(-3:3),
cost = 10^(-3:3), tunecontrol = cv)
soil_svm <- tune_soil$best.model
# Load validation points
validation_points <- readOGR('vector/validation/GE_VAL_s2_bands_subset.gpkg')
validation_df <- as.data.frame(validation_points)
validation_df <- validation_df[ ,c(2:11,30:32)]
validation_df[1:10] <- validation_df[1:10] / 10000
# Run predictions
validation_df$PV_pred <- predict(PV_svm, validation_df[ ,1:10], na.action = na.exclude)
validation_df$NPV_pred <- predict(NPV_svm, validation_df[ ,1:10], na.action = na.exclude)
validation_df$soil_pred <- predict(soil_svm, validation_df[ ,1:10], na.action = na.exclude)
# Change values that are out of range to 0 or 1
validation_df$PV_pred[validation_df$PV_pred<0] <- 0
validation_df$PV_pred[validation_df$PV_pred>1] <- 1
validation_df$NPV_pred[validation_df$NPV_pred<0] <- 0
validation_df$NPV_pred[validation_df$NPV_pred>1] <- 1
validation_df$soil_pred[validation_df$soil_pred<0] <- 0
validation_df$soil_pred[validation_df$soil_pred>1] <- 1
valim_PV <- lm(validation_df$PV ~ validation_df$PV_pred, validation_df)
valim_NPV <- lm(validation_df$NPV ~ validation_df$NPV_pred, validation_df)
valim_soil <- lm(validation_df$soil ~ validation_df$soil_pred, validation_df)
# =============================================================================
# Function to plot the regressions
ggplotRegression <- function (fit, actual) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5),
"MAE =", mae(actual, predict(fit)),
"RMSE =", rmse(actual, predict(fit))))
}
# =============================================================================
# AAAnd plotting it
ggplotRegression(valim_PV, validation_df$PV)
ggplotRegression(valim_NPV, validation_df$NPV)
ggplotRegression(valim_soil, validation_df$soil)
unmix <- function(raster_list, bandnames, model_pv, model_npv, model_soil){
"Function to unmix all values in a .
df:                 (list) Input dataframe. First column must contain the
class-IDs in integer format. Remaining columns must
returns:            (list) Dataframe with linearily mixed features and
corresponding fraction of target class (i.e. cl_target)
"
# count number of observations = number of bands in the input datasets
n_bands <- nlayers(stack(raster_list[[1]]))
obs_dates <- names(stack(raster_list[[1]]))
# init stacks for fractions at every oobservation
list_pv   <- list()
list_npv  <- vector(mode='list', length=n_bands)
list_soil <- vector(mode='list', length=n_bands)
# unmix at every time step
for (obs in 1:n_bands) {
print(obs)
# read inidvidual spectral bands for individual files
blue  <- raster(raster_list[1], band = obs)
green <- raster(raster_list[3], band = obs)
red   <- raster(raster_list[8], band = obs)
re1   <- raster(raster_list[5], band = obs)
re2   <- raster(raster_list[6], band = obs)
re3   <- raster(raster_list[7], band = obs)
bnir  <- raster(raster_list[2], band = obs)
nir   <- raster(raster_list[4], band = obs)
swir1 <- raster(raster_list[9], band = obs)
swir2 <- raster(raster_list[10], band = obs)
# stack spectral bands into a monotemporal, multispectral raster stack
stack_monotemp <- stack(blue, green, red, re1, re2, re3, bnir, nir, swir1, swir2)
stack_monotemp <- stack_monotemp / 10000
names(stack_monotemp) <- bandnames
# apply unmixing models to the monotemporal raster
pred_pv   <- predict(stack_monotemp, model_pv, type='response', na.omit=T)
pred_npv  <- predict(stack_monotemp, model_npv, type='response', na.omit=T)
pred_soil <- predict(stack_monotemp, model_soil, type='response', na.omit=T)
# add raster band name according to date
plot(pred_pv)
names(pred_pv)   <- substring(obs_dates[obs], 1, 9)
names(pred_npv)  <- substring(obs_dates[obs], 1, 9)
names(pred_soil) <- substring(obs_dates[obs], 1, 9)
# add fractions to the overall multitemporal fraction datasets
list_pv[obs] <- pred_pv
print(list_pv)
list_npv[obs] <- pred_npv
list_soil[obs] <- pred_soil
}
stack_pv   <- stack(list_pv)
stack_npv  <- stack(list_npv)
stack_soil <- stack(list_soil)
return(stack_pv, stack_npv, stack_soil)
}
# HERE; WE CAN LOAD THE SENTINEL 2 IMAGERY, THAT WE WILL DECIDE TO USE
TEMP_dir = 'E:/__Earth_Observation/grasslands/data/raster/sentinel-2/X0058_Y0040'
rasters_list <- list.files(TEMP_dir, full.names = TRUE)
rasters_list
band_names <- dimnames(PV_svm$SV)[[2]]
# testing unmix
unmix(rasters_list, band_names, PV_svm, NPV_svm, soil_svm)
# testing unmix
TEMP_unmixed <- unmix(rasters_list, band_names, PV_svm, NPV_svm, soil_svm)
